#takes the json file imported or generated by other loaders and returns python objects
import os
import json
from file_io.elegant_loader import load_elegant
from file_io.opa_loader import load_opa
from file_io.madx_loader import load_madx
from file_io.py_loader import load_pyat
from core.elements import Drift, Quadrupole,Sextupole,Dipole

def load_file(path):
    _, ext = os.path.splitext(path)

    if ext.lower() == ".json":
        with open(path, "r") as file:
            data = json.load(file)
    elif ext.lower() == ".opa":
        data = load_opa(path)
    elif ext.lower() == ".madx":
        data = load_madx(path)
    elif ext.lower() == ".py":
        data = load_pyat(path)
    sections = data.get("lattices",{})
    metadata = data.get("parameters", {})
    metadata["name"] = data.get("title")
    elements = build_element_objects(data.get("elements", {}), data.get("lattices", {}))
    return sections,metadata, elements

def build_element_objects(elements, lattices):
    element_map = {}
    for section_name, element_names in lattices.items():
        section_elements = []

        for name in element_names:
            element_data = elements.get(name)
            if not element_data:
                continue 

            elem_type = element_data.get("type")
            length = element_data.get("length", 0.0)

            if elem_type == "drift":
                section_elements.append(Drift(name, length))
            elif elem_type == "quadrupole":
                k1 = element_data.get("k1", 0.0)
                section_elements.append(Quadrupole(name, length, k1))
            elif elem_type == "sextupole":
                k2 = element_data.get("k2",0.0)
                section_elements.append(Sextupole(name, length,k2))
            elif elem_type == "dipole":
                angle = element_data.get("angle",0.0)
                section_elements.append(Dipole(name, length, angle))
            else:
                
                continue

        element_map[section_name] = section_elements

    return element_map
